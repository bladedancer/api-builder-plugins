{
	"schemaVersion": "4",
	"info": {
		"name": "Greet flow",
		"description": "Greets a user",
		"author": "support@axway.com",
		"license": "ISC"
	},
	"parameter": {
		"properties": {
			"params": {
				"type": "object",
				"description": "The parameters from the endpoint.",
				"properties": {
					"username": {
						"type": "string",
						"description": "The username"
					}
				},
				"additionalProperties": false,
				"required": [
					"username"
				]
			},
			"request": {
				"type": "object",
				"description": "The HTTP request."
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false,
		"required": [
			"params",
			"request",
			"config",
			"env"
		]
	},
	"start": "condition.1",
	"nodes": {
		"response.success": {
			"type": "nodehandler://axway-flow/http",
			"name": "Success (HTTP 200)",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"value": "200",
					"type": "number",
					"metaName": "status",
					"metaDescription": "The HTTP status code"
				},
				{
					"name": "body",
					"value": "$.greeting",
					"metaName": "body",
					"metaDescription": "The response payload"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"response.error": {
			"type": "nodehandler://axway-flow/http",
			"name": "Bad Request (HTTP 400)",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"value": "400",
					"type": "number",
					"metaName": "status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"doT.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-dot/doT",
			"name": "Format Greeting",
			"method": "formatStr",
			"parameters": [
				{
					"name": "data",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The data to evaluate the template with. Use $ to access the entire context."
				},
				{
					"name": "template",
					"value": "\"{{=it.config.helloworld.salutation}} {{=it.params.username}}\"",
					"type": "string",
					"metaName": "template",
					"metaDescription": "The doT template."
				}
			],
			"outputs": {
				"next": {
					"context": "$.greeting",
					"routes": [
						"response.success"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"response.error"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Format string"
		},
		"condition.1": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Check Username",
			"method": "exists",
			"parameters": [
				{
					"name": "source",
					"value": "$.params.username",
					"metaName": "source",
					"metaDescription": "The input to test."
				}
			],
			"outputs": {
				"true": {
					"context": "$.exists",
					"routes": [
						"doT.1",
						"address.1"
					],
					"metaName": "True"
				},
				"false": {
					"context": "$.exists",
					"routes": [
						"response.error"
					],
					"metaName": "False"
				}
			},
			"metaMethod": "Exists"
		},
		"address.1": {
			"type": "nodehandler://@bladedancer/api-builder-plugin-gm-db-connector/address",
			"name": "Insert Object",
			"method": "insertObj",
			"parameters": [
				{
					"name": "value",
					"type": "object",
					"value": "{\n\"street1\": \"testing\"\n}",
					"metaName": "value",
					"metaDescription": "The object to insert."
				}
			],
			"outputs": {
				"next": {
					"context": "$.inserted",
					"routes": [
						"response.success",
						"address.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Insert Object"
		},
		"address.2": {
			"type": "nodehandler://@bladedancer/api-builder-plugin-gm-db-connector/address",
			"name": "Select All",
			"method": "selectAll",
			"parameters": [],
			"outputs": {
				"next": {
					"routes": [
						"response.success"
					],
					"context": "$.selected",
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Select All"
		}
	}
}